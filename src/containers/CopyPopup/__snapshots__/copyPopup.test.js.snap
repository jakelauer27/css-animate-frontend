// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CopyPopup copyPasteAnimation should return some jsx 1`] = `
<div
  className="animation-popup"
>
  <textarea
    className="animation-text"
    readOnly={true}
    value="animation: bounceAppear 450ms linear .7s 1 normal; 
animation-fill-mode: undefined;"
  />
</div>
`;

exports[`CopyPopup copyPasteKeyframes should return some jsx 1`] = `
<div
  className="keyframes-popup"
>
  <textarea
    className="keyframe-text"
    readOnly={true}
    value="@keyframes bounceAppear {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.1);
  }
  80% {
    opacity: 1;
    transform: scale(.89);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
  
}"
  />
</div>
`;

exports[`CopyPopup should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CopyPopup
    animation={
      Object {
        "keyframes": Object {
          "name": "bounceAppear",
          "sections": Array [
            Object {
              "label": "0%",
              "name": "0%",
              "properties": Array [
                Object {
                  "name": "opacity",
                  "value": "0",
                },
                Object {
                  "name": "transform",
                  "value": "scale(0.3)",
                },
              ],
            },
            Object {
              "label": "50%",
              "name": "50%",
              "properties": Array [
                Object {
                  "name": "opacity",
                  "value": "0.9",
                },
                Object {
                  "name": "transform",
                  "value": "scale(1.1)",
                },
              ],
            },
            Object {
              "label": "80%",
              "name": "80%",
              "properties": Array [
                Object {
                  "name": "opacity",
                  "value": "1",
                },
                Object {
                  "name": "transform",
                  "value": "scale(.89)",
                },
              ],
            },
            Object {
              "label": "100%",
              "name": "100%",
              "properties": Array [
                Object {
                  "name": "opacity",
                  "value": "1",
                },
                Object {
                  "name": "transform",
                  "value": "scale(1)",
                },
              ],
            },
          ],
        },
        "properties": Object {
          "delay": ".7s",
          "direction": "normal",
          "duration": "450ms",
          "fill-mode": "both",
          "iterationCount": 1,
          "name": "bounceAppear",
          "timingFunction": "linear",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="popup-keyframes-container popup-container"
        >
          <h2
            className="copy-popup-label"
          >
            Keyframes
          </h2>
          <div
            className="keyframes-popup"
          >
            <textarea
              className="keyframe-text"
              readOnly={true}
              value="@keyframes bounceAppear {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.1);
  }
  80% {
    opacity: 1;
    transform: scale(.89);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
  
}"
            />
          </div>
          <button
            className="copy-code-btn copy-keyframes-btn false"
            name="copyKeyframes"
            onClick={[Function]}
          >
            copy
          </button>
        </div>,
        <div
          className="popup-animation-container popup-container"
        >
          <h2
            className="copy-popup-label"
          >
            Animation
          </h2>
          <div
            className="animation-popup"
          >
            <textarea
              className="animation-text"
              readOnly={true}
              value="animation: bounceAppear 450ms linear .7s 1 normal; 
animation-fill-mode: undefined;"
            />
          </div>
          <button
            className="copy-code-btn copy-animation-btn false"
            name="copyProperties"
            onClick={[Function]}
          >
            copy
          </button>
        </div>,
        <Link
          replace={false}
          to="/properties"
        >
          <button
            className="close-popup-btn"
          >
            <i
              className="fas fa-times"
            />
          </button>
        </Link>,
      ],
      "className": "copy-paste-popup",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h2
              className="copy-popup-label"
            >
              Keyframes
            </h2>,
            <div
              className="keyframes-popup"
            >
              <textarea
                className="keyframe-text"
                readOnly={true}
                value="@keyframes bounceAppear {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.1);
  }
  80% {
    opacity: 1;
    transform: scale(.89);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
  
}"
              />
            </div>,
            <button
              className="copy-code-btn copy-keyframes-btn false"
              name="copyKeyframes"
              onClick={[Function]}
            >
              copy
            </button>,
          ],
          "className": "popup-keyframes-container popup-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Keyframes",
              "className": "copy-popup-label",
            },
            "ref": null,
            "rendered": "Keyframes",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <textarea
                className="keyframe-text"
                readOnly={true}
                value="@keyframes bounceAppear {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.1);
  }
  80% {
    opacity: 1;
    transform: scale(.89);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
  
}"
              />,
              "className": "keyframes-popup",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "keyframe-text",
                "readOnly": true,
                "value": "@keyframes bounceAppear {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.1);
  }
  80% {
    opacity: 1;
    transform: scale(.89);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
  
}",
              },
              "ref": null,
              "rendered": null,
              "type": "textarea",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "copy",
              "className": "copy-code-btn copy-keyframes-btn false",
              "name": "copyKeyframes",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "copy",
            "type": "button",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h2
              className="copy-popup-label"
            >
              Animation
            </h2>,
            <div
              className="animation-popup"
            >
              <textarea
                className="animation-text"
                readOnly={true}
                value="animation: bounceAppear 450ms linear .7s 1 normal; 
animation-fill-mode: undefined;"
              />
            </div>,
            <button
              className="copy-code-btn copy-animation-btn false"
              name="copyProperties"
              onClick={[Function]}
            >
              copy
            </button>,
          ],
          "className": "popup-animation-container popup-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Animation",
              "className": "copy-popup-label",
            },
            "ref": null,
            "rendered": "Animation",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <textarea
                className="animation-text"
                readOnly={true}
                value="animation: bounceAppear 450ms linear .7s 1 normal; 
animation-fill-mode: undefined;"
              />,
              "className": "animation-popup",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "animation-text",
                "readOnly": true,
                "value": "animation: bounceAppear 450ms linear .7s 1 normal; 
animation-fill-mode: undefined;",
              },
              "ref": null,
              "rendered": null,
              "type": "textarea",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "copy",
              "className": "copy-code-btn copy-animation-btn false",
              "name": "copyProperties",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "copy",
            "type": "button",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <button
            className="close-popup-btn"
          >
            <i
              className="fas fa-times"
            />
          </button>,
          "replace": false,
          "to": "/properties",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <i
              className="fas fa-times"
            />,
            "className": "close-popup-btn",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "fas fa-times",
            },
            "ref": null,
            "rendered": null,
            "type": "i",
          },
          "type": "button",
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="popup-keyframes-container popup-container"
          >
            <h2
              className="copy-popup-label"
            >
              Keyframes
            </h2>
            <div
              className="keyframes-popup"
            >
              <textarea
                className="keyframe-text"
                readOnly={true}
                value="@keyframes bounceAppear {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.1);
  }
  80% {
    opacity: 1;
    transform: scale(.89);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
  
}"
              />
            </div>
            <button
              className="copy-code-btn copy-keyframes-btn false"
              name="copyKeyframes"
              onClick={[Function]}
            >
              copy
            </button>
          </div>,
          <div
            className="popup-animation-container popup-container"
          >
            <h2
              className="copy-popup-label"
            >
              Animation
            </h2>
            <div
              className="animation-popup"
            >
              <textarea
                className="animation-text"
                readOnly={true}
                value="animation: bounceAppear 450ms linear .7s 1 normal; 
animation-fill-mode: undefined;"
              />
            </div>
            <button
              className="copy-code-btn copy-animation-btn false"
              name="copyProperties"
              onClick={[Function]}
            >
              copy
            </button>
          </div>,
          <Link
            replace={false}
            to="/properties"
          >
            <button
              className="close-popup-btn"
            >
              <i
                className="fas fa-times"
              />
            </button>
          </Link>,
        ],
        "className": "copy-paste-popup",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2
                className="copy-popup-label"
              >
                Keyframes
              </h2>,
              <div
                className="keyframes-popup"
              >
                <textarea
                  className="keyframe-text"
                  readOnly={true}
                  value="@keyframes bounceAppear {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.1);
  }
  80% {
    opacity: 1;
    transform: scale(.89);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
  
}"
                />
              </div>,
              <button
                className="copy-code-btn copy-keyframes-btn false"
                name="copyKeyframes"
                onClick={[Function]}
              >
                copy
              </button>,
            ],
            "className": "popup-keyframes-container popup-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Keyframes",
                "className": "copy-popup-label",
              },
              "ref": null,
              "rendered": "Keyframes",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <textarea
                  className="keyframe-text"
                  readOnly={true}
                  value="@keyframes bounceAppear {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.1);
  }
  80% {
    opacity: 1;
    transform: scale(.89);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
  
}"
                />,
                "className": "keyframes-popup",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "keyframe-text",
                  "readOnly": true,
                  "value": "@keyframes bounceAppear {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.1);
  }
  80% {
    opacity: 1;
    transform: scale(.89);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
  
}",
                },
                "ref": null,
                "rendered": null,
                "type": "textarea",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "copy",
                "className": "copy-code-btn copy-keyframes-btn false",
                "name": "copyKeyframes",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "copy",
              "type": "button",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2
                className="copy-popup-label"
              >
                Animation
              </h2>,
              <div
                className="animation-popup"
              >
                <textarea
                  className="animation-text"
                  readOnly={true}
                  value="animation: bounceAppear 450ms linear .7s 1 normal; 
animation-fill-mode: undefined;"
                />
              </div>,
              <button
                className="copy-code-btn copy-animation-btn false"
                name="copyProperties"
                onClick={[Function]}
              >
                copy
              </button>,
            ],
            "className": "popup-animation-container popup-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Animation",
                "className": "copy-popup-label",
              },
              "ref": null,
              "rendered": "Animation",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <textarea
                  className="animation-text"
                  readOnly={true}
                  value="animation: bounceAppear 450ms linear .7s 1 normal; 
animation-fill-mode: undefined;"
                />,
                "className": "animation-popup",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "animation-text",
                  "readOnly": true,
                  "value": "animation: bounceAppear 450ms linear .7s 1 normal; 
animation-fill-mode: undefined;",
                },
                "ref": null,
                "rendered": null,
                "type": "textarea",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "copy",
                "className": "copy-code-btn copy-animation-btn false",
                "name": "copyProperties",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "copy",
              "type": "button",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <button
              className="close-popup-btn"
            >
              <i
                className="fas fa-times"
              />
            </button>,
            "replace": false,
            "to": "/properties",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <i
                className="fas fa-times"
              />,
              "className": "close-popup-btn",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "fas fa-times",
              },
              "ref": null,
              "rendered": null,
              "type": "i",
            },
            "type": "button",
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
